// Generated by CoffeeScript 1.6.2
var async, fs, mkdirIfNotExist, mkdirp;

mkdirp = require('mkdirp');

fs = require('fs');

async = require('async');

mkdirIfNotExist = function(dir, cb) {
  return fs.stat(dir, function(err, stat) {
    if (err && err.code !== 'ENOENT') {
      cb(err);
      cb = function() {};
      return;
    }
    if (!err) {
      if (stat.isDirectory()) {
        cb();
        cb = function() {};
        return;
      }
      if (stat.isFile()) {
        cb(new Error("Unable to output to the folder '" + dir + "', a file with the same name already exist"));
        cb = function() {};
        return;
      }
    }
    return mkdirp(dir, function(err) {
      return cb(err);
    });
  });
};

module.exports = {
  load: function(cb) {
    return cb();
  },
  oncall: function(obj, params, cb) {
    var jelly, _base, _base1, _ref, _ref1, _ref2;

    if ((_ref = params.pluginParameters) == null) {
      params.pluginParameters = {};
    }
    if ((_ref1 = (_base = params.pluginParameters).output) == null) {
      _base.output = {};
    }
    if ((_ref2 = (_base1 = params.pluginParameters.output).outputDirectoryList) == null) {
      _base1.outputDirectoryList = [];
    }
    jelly = this.getParentOfClass('Jelly');
    if (obj.File === true) {
      async.each(params.pluginParameters.output.outputDirectoryList, function(dir, cb) {
        return mkdirIfNotExist("" + (jelly.getRootDirectory()) + "/" + dir, function(err) {
          if (err) {
            cb(err);
            cb = function() {};
            return;
          }
          return cb();
        });
      }, cb);
      return;
    }
    cb();
    return cb = function() {};
  },
  unload: function(cb) {
    return cb();
  }
};
