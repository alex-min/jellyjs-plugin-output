// Generated by CoffeeScript 1.6.2
var assert, e, fs, jy, pluginDir, request, root, shell, toType;

pluginDir = __dirname + '/../';

toType = function(obj) {
  return {}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
};

assert = require('chai').assert;

request = require('request');

shell = require('shelljs');

fs = require('fs');

try {
  jy = require('jellyjs');
} catch (_error) {
  e = _error;
  root = __dirname + '/../../../../';
  jy = require("" + root + "/index.js");
}

describe('#Plugin::output', function() {
  return it('Should work on File entities', function(cb) {
    var jelly;

    shell.rm('-rf', "" + __dirname + "/demo/public");
    jelly = new jy.Jelly();
    return jelly.boot({
      directory: "" + __dirname + "/demo",
      packagePlugins: ['template'],
      folderPlugins: [
        {
          name: 'output',
          directory: pluginDir
        }
      ],
      localRequire: function(elm, cb) {
        try {
          cb(null, require.resolve(elm));
          return cb = function() {};
        } catch (_error) {
          e = _error;
          cb(e);
          return cb = function() {};
        }
      }
    }, function(err) {
      if (err) {
        cb(err);
        cb = function() {};
        return;
      }
      return fs.readFile("" + __dirname + "/demo/public/module1-file1.tpl", function(err, data) {
        if (err) {
          cb(new Error("The generated extension does not work as expected: " + err.message));
          cb = function() {};
          return;
        }
        try {
          assert.equal(data + '', 'TPL TEST', 'The file content should be equal to the original content');
          cb();
          return cb = function() {};
        } catch (_error) {
          e = _error;
          cb(e);
          return cb = function() {};
        }
      });
    });
  });
});
